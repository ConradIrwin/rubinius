// Generated by llvm2cpp - DO NOT MODIFY!


Module* makeLLVMModuleContents(Module *mod) {

mod->setModuleIdentifier("vm/gen/types.bc");

StructType *StructTy_struct_rubinius__VM = mod->getTypeByName("struct.rubinius::VM");
if (!StructTy_struct_rubinius__VM) {
StructTy_struct_rubinius__VM = StructType::create(mod->getContext(), "struct.rubinius::VM");
}
std::vector<Type*>StructTy_struct_rubinius__VM_fields;
if (StructTy_struct_rubinius__VM->isOpaque()) {
StructTy_struct_rubinius__VM->setBody(StructTy_struct_rubinius__VM_fields, /*isPacked=*/false);
}

PointerType* PointerTy_1 = PointerType::get(StructTy_struct_rubinius__VM, 0);

StructType *StructTy_struct_rubinius__TypeInfo = mod->getTypeByName("struct.rubinius::TypeInfo");
if (!StructTy_struct_rubinius__TypeInfo) {
StructTy_struct_rubinius__TypeInfo = StructType::create(mod->getContext(), "struct.rubinius::TypeInfo");
}
std::vector<Type*>StructTy_struct_rubinius__TypeInfo_fields;
if (StructTy_struct_rubinius__TypeInfo->isOpaque()) {
StructTy_struct_rubinius__TypeInfo->setBody(StructTy_struct_rubinius__TypeInfo_fields, /*isPacked=*/false);
}

PointerType* PointerTy_2 = PointerType::get(StructTy_struct_rubinius__TypeInfo, 0);

StructType *StructTy_struct_rubinius__VMMethod = mod->getTypeByName("struct.rubinius::VMMethod");
if (!StructTy_struct_rubinius__VMMethod) {
StructTy_struct_rubinius__VMMethod = StructType::create(mod->getContext(), "struct.rubinius::VMMethod");
}
std::vector<Type*>StructTy_struct_rubinius__VMMethod_fields;
if (StructTy_struct_rubinius__VMMethod->isOpaque()) {
StructTy_struct_rubinius__VMMethod->setBody(StructTy_struct_rubinius__VMMethod_fields, /*isPacked=*/false);
}

PointerType* PointerTy_3 = PointerType::get(StructTy_struct_rubinius__VMMethod, 0);

StructType *StructTy_struct_rubinius__Fixnum = mod->getTypeByName("struct.rubinius::Fixnum");
if (!StructTy_struct_rubinius__Fixnum) {
StructTy_struct_rubinius__Fixnum = StructType::create(mod->getContext(), "struct.rubinius::Fixnum");
}
std::vector<Type*>StructTy_struct_rubinius__Fixnum_fields;
if (StructTy_struct_rubinius__Fixnum->isOpaque()) {
StructTy_struct_rubinius__Fixnum->setBody(StructTy_struct_rubinius__Fixnum_fields, /*isPacked=*/false);
}

PointerType* PointerTy_4 = PointerType::get(StructTy_struct_rubinius__Fixnum, 0);

StructType *StructTy_struct_rubinius__Symbol = mod->getTypeByName("struct.rubinius::Symbol");
if (!StructTy_struct_rubinius__Symbol) {
StructTy_struct_rubinius__Symbol = StructType::create(mod->getContext(), "struct.rubinius::Symbol");
}
std::vector<Type*>StructTy_struct_rubinius__Symbol_fields;
if (StructTy_struct_rubinius__Symbol->isOpaque()) {
StructTy_struct_rubinius__Symbol->setBody(StructTy_struct_rubinius__Symbol_fields, /*isPacked=*/false);
}

PointerType* PointerTy_5 = PointerType::get(StructTy_struct_rubinius__Symbol, 0);

StructType *StructTy_struct_rubinius__Selector = mod->getTypeByName("struct.rubinius::Selector");
if (!StructTy_struct_rubinius__Selector) {
StructTy_struct_rubinius__Selector = StructType::create(mod->getContext(), "struct.rubinius::Selector");
}
std::vector<Type*>StructTy_struct_rubinius__Selector_fields;
if (StructTy_struct_rubinius__Selector->isOpaque()) {
StructTy_struct_rubinius__Selector->setBody(StructTy_struct_rubinius__Selector_fields, /*isPacked=*/false);
}


StructType *StructTy_struct_rubinius__LookupTable = mod->getTypeByName("struct.rubinius::LookupTable");
if (!StructTy_struct_rubinius__LookupTable) {
StructTy_struct_rubinius__LookupTable = StructType::create(mod->getContext(), "struct.rubinius::LookupTable");
}
std::vector<Type*>StructTy_struct_rubinius__LookupTable_fields;
if (StructTy_struct_rubinius__LookupTable->isOpaque()) {
StructTy_struct_rubinius__LookupTable->setBody(StructTy_struct_rubinius__LookupTable_fields, /*isPacked=*/false);
}

PointerType* PointerTy_7 = PointerType::get(StructTy_struct_rubinius__LookupTable, 0);

StructType *StructTy_struct_rubinius__MethodTable = mod->getTypeByName("struct.rubinius::MethodTable");
if (!StructTy_struct_rubinius__MethodTable) {
StructTy_struct_rubinius__MethodTable = StructType::create(mod->getContext(), "struct.rubinius::MethodTable");
}
std::vector<Type*>StructTy_struct_rubinius__MethodTable_fields;
if (StructTy_struct_rubinius__MethodTable->isOpaque()) {
StructTy_struct_rubinius__MethodTable->setBody(StructTy_struct_rubinius__MethodTable_fields, /*isPacked=*/false);
}

PointerType* PointerTy_8 = PointerType::get(StructTy_struct_rubinius__MethodTable, 0);

StructType *StructTy_struct_rubinius__jit__RuntimeDataHolder = mod->getTypeByName("struct.rubinius::jit::RuntimeDataHolder");
if (!StructTy_struct_rubinius__jit__RuntimeDataHolder) {
StructTy_struct_rubinius__jit__RuntimeDataHolder = StructType::create(mod->getContext(), "struct.rubinius::jit::RuntimeDataHolder");
}
std::vector<Type*>StructTy_struct_rubinius__jit__RuntimeDataHolder_fields;
if (StructTy_struct_rubinius__jit__RuntimeDataHolder->isOpaque()) {
StructTy_struct_rubinius__jit__RuntimeDataHolder->setBody(StructTy_struct_rubinius__jit__RuntimeDataHolder_fields, /*isPacked=*/false);
}

PointerType* PointerTy_9 = PointerType::get(StructTy_struct_rubinius__jit__RuntimeDataHolder, 0);

StructType *StructTy_struct_rubinius__Inliners = mod->getTypeByName("struct.rubinius::Inliners");
if (!StructTy_struct_rubinius__Inliners) {
StructTy_struct_rubinius__Inliners = StructType::create(mod->getContext(), "struct.rubinius::Inliners");
}
std::vector<Type*>StructTy_struct_rubinius__Inliners_fields;
if (StructTy_struct_rubinius__Inliners->isOpaque()) {
StructTy_struct_rubinius__Inliners->setBody(StructTy_struct_rubinius__Inliners_fields, /*isPacked=*/false);
}

PointerType* PointerTy_10 = PointerType::get(StructTy_struct_rubinius__Inliners, 0);

StructType *StructTy_struct_rubinius__CallUnit = mod->getTypeByName("struct.rubinius::CallUnit");
if (!StructTy_struct_rubinius__CallUnit) {
StructTy_struct_rubinius__CallUnit = StructType::create(mod->getContext(), "struct.rubinius::CallUnit");
}
std::vector<Type*>StructTy_struct_rubinius__CallUnit_fields;
if (StructTy_struct_rubinius__CallUnit->isOpaque()) {
StructTy_struct_rubinius__CallUnit->setBody(StructTy_struct_rubinius__CallUnit_fields, /*isPacked=*/false);
}

PointerType* PointerTy_11 = PointerType::get(StructTy_struct_rubinius__CallUnit, 0);

StructType *StructTy_struct_rubinius__InstructionSequence = mod->getTypeByName("struct.rubinius::InstructionSequence");
if (!StructTy_struct_rubinius__InstructionSequence) {
StructTy_struct_rubinius__InstructionSequence = StructType::create(mod->getContext(), "struct.rubinius::InstructionSequence");
}
std::vector<Type*>StructTy_struct_rubinius__InstructionSequence_fields;
if (StructTy_struct_rubinius__InstructionSequence->isOpaque()) {
StructTy_struct_rubinius__InstructionSequence->setBody(StructTy_struct_rubinius__InstructionSequence_fields, /*isPacked=*/false);
}

PointerType* PointerTy_12 = PointerType::get(StructTy_struct_rubinius__InstructionSequence, 0);

StructType *StructTy_struct_rubinius__MethodCacheEntry = mod->getTypeByName("struct.rubinius::MethodCacheEntry");
if (!StructTy_struct_rubinius__MethodCacheEntry) {
StructTy_struct_rubinius__MethodCacheEntry = StructType::create(mod->getContext(), "struct.rubinius::MethodCacheEntry");
}
std::vector<Type*>StructTy_struct_rubinius__MethodCacheEntry_fields;
if (StructTy_struct_rubinius__MethodCacheEntry->isOpaque()) {
StructTy_struct_rubinius__MethodCacheEntry->setBody(StructTy_struct_rubinius__MethodCacheEntry_fields, /*isPacked=*/false);
}

PointerType* PointerTy_13 = PointerType::get(StructTy_struct_rubinius__MethodCacheEntry, 0);

StructType *StructTy_struct_rubinius__StaticScope = mod->getTypeByName("struct.rubinius::StaticScope");
if (!StructTy_struct_rubinius__StaticScope) {
StructTy_struct_rubinius__StaticScope = StructType::create(mod->getContext(), "struct.rubinius::StaticScope");
}
std::vector<Type*>StructTy_struct_rubinius__StaticScope_fields;
if (StructTy_struct_rubinius__StaticScope->isOpaque()) {
StructTy_struct_rubinius__StaticScope->setBody(StructTy_struct_rubinius__StaticScope_fields, /*isPacked=*/false);
}

PointerType* PointerTy_14 = PointerType::get(StructTy_struct_rubinius__StaticScope, 0);

StructType *StructTy_struct_rubinius__Arguments = mod->getTypeByName("struct.rubinius::Arguments");
if (!StructTy_struct_rubinius__Arguments) {
StructTy_struct_rubinius__Arguments = StructType::create(mod->getContext(), "struct.rubinius::Arguments");
}
std::vector<Type*>StructTy_struct_rubinius__Arguments_fields;
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_5);
StructType *StructTy_struct_rubinius__Object = mod->getTypeByName("struct.rubinius::Object");
if (!StructTy_struct_rubinius__Object) {
StructTy_struct_rubinius__Object = StructType::create(mod->getContext(), "struct.rubinius::Object");
}
std::vector<Type*>StructTy_struct_rubinius__Object_fields;
StructType *StructTy_struct_rubinius__ObjectHeader = mod->getTypeByName("struct.rubinius::ObjectHeader");
if (!StructTy_struct_rubinius__ObjectHeader) {
StructTy_struct_rubinius__ObjectHeader = StructType::create(mod->getContext(), "struct.rubinius::ObjectHeader");
}
std::vector<Type*>StructTy_struct_rubinius__ObjectHeader_fields;
StructType *StructTy_union_rubinius__HeaderWord = mod->getTypeByName("union.rubinius::HeaderWord");
if (!StructTy_union_rubinius__HeaderWord) {
StructTy_union_rubinius__HeaderWord = StructType::create(mod->getContext(), "union.rubinius::HeaderWord");
}
std::vector<Type*>StructTy_union_rubinius__HeaderWord_fields;
StructTy_union_rubinius__HeaderWord_fields.push_back(IntegerType::get(mod->getContext(), 64));
if (StructTy_union_rubinius__HeaderWord->isOpaque()) {
StructTy_union_rubinius__HeaderWord->setBody(StructTy_union_rubinius__HeaderWord_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__ObjectHeader_fields.push_back(StructTy_union_rubinius__HeaderWord);
StructType *StructTy_struct_rubinius__Class = mod->getTypeByName("struct.rubinius::Class");
if (!StructTy_struct_rubinius__Class) {
StructTy_struct_rubinius__Class = StructType::create(mod->getContext(), "struct.rubinius::Class");
}
std::vector<Type*>StructTy_struct_rubinius__Class_fields;
StructType *StructTy_struct_rubinius__Module = mod->getTypeByName("struct.rubinius::Module");
if (!StructTy_struct_rubinius__Module) {
StructTy_struct_rubinius__Module = StructType::create(mod->getContext(), "struct.rubinius::Module");
}
std::vector<Type*>StructTy_struct_rubinius__Module_fields;
StructTy_struct_rubinius__Module_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_8);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_7);
PointerType* PointerTy_18 = PointerType::get(StructTy_struct_rubinius__Module, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_18);
StructType *StructTy_struct_rubinius__Array = mod->getTypeByName("struct.rubinius::Array");
if (!StructTy_struct_rubinius__Array) {
StructTy_struct_rubinius__Array = StructType::create(mod->getContext(), "struct.rubinius::Array");
}
std::vector<Type*>StructTy_struct_rubinius__Array_fields;
StructTy_struct_rubinius__Array_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_4);
StructType *StructTy_struct_rubinius__Tuple = mod->getTypeByName("struct.rubinius::Tuple");
if (!StructTy_struct_rubinius__Tuple) {
StructTy_struct_rubinius__Tuple = StructType::create(mod->getContext(), "struct.rubinius::Tuple");
}
std::vector<Type*>StructTy_struct_rubinius__Tuple_fields;
StructTy_struct_rubinius__Tuple_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Tuple_fields.push_back(IntegerType::get(mod->getContext(), 32));
PointerType* PointerTy_16 = PointerType::get(StructTy_struct_rubinius__Object, 0);

ArrayType* ArrayTy_21 = ArrayType::get(PointerTy_16, 0);

StructTy_struct_rubinius__Tuple_fields.push_back(ArrayTy_21);
if (StructTy_struct_rubinius__Tuple->isOpaque()) {
StructTy_struct_rubinius__Tuple->setBody(StructTy_struct_rubinius__Tuple_fields, /*isPacked=*/false);
}

PointerType* PointerTy_20 = PointerType::get(StructTy_struct_rubinius__Tuple, 0);

StructTy_struct_rubinius__Array_fields.push_back(PointerTy_20);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_16);
if (StructTy_struct_rubinius__Array->isOpaque()) {
StructTy_struct_rubinius__Array->setBody(StructTy_struct_rubinius__Array_fields, /*isPacked=*/false);
}

PointerType* PointerTy_19 = PointerType::get(StructTy_struct_rubinius__Array, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_19);
if (StructTy_struct_rubinius__Module->isOpaque()) {
StructTy_struct_rubinius__Module->setBody(StructTy_struct_rubinius__Module_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__Class_fields.push_back(StructTy_struct_rubinius__Module);
StructTy_struct_rubinius__Class_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__Class_fields.push_back(PointerTy_7);
StructTy_struct_rubinius__Class_fields.push_back(PointerTy_2);
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(mod->getContext(), 8));
if (StructTy_struct_rubinius__Class->isOpaque()) {
StructTy_struct_rubinius__Class->setBody(StructTy_struct_rubinius__Class_fields, /*isPacked=*/false);
}

PointerType* PointerTy_17 = PointerType::get(StructTy_struct_rubinius__Class, 0);

StructTy_struct_rubinius__ObjectHeader_fields.push_back(PointerTy_17);
StructTy_struct_rubinius__ObjectHeader_fields.push_back(PointerTy_16);
PointerType* PointerTy_23 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);

ArrayType* ArrayTy_22 = ArrayType::get(PointerTy_23, 0);

StructTy_struct_rubinius__ObjectHeader_fields.push_back(ArrayTy_22);
if (StructTy_struct_rubinius__ObjectHeader->isOpaque()) {
StructTy_struct_rubinius__ObjectHeader->setBody(StructTy_struct_rubinius__ObjectHeader_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__Object_fields.push_back(StructTy_struct_rubinius__ObjectHeader);
if (StructTy_struct_rubinius__Object->isOpaque()) {
StructTy_struct_rubinius__Object->setBody(StructTy_struct_rubinius__Object_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__Arguments_fields.push_back(IntegerType::get(mod->getContext(), 32));
PointerType* PointerTy_24 = PointerType::get(PointerTy_16, 0);

StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_24);
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_20);
if (StructTy_struct_rubinius__Arguments->isOpaque()) {
StructTy_struct_rubinius__Arguments->setBody(StructTy_struct_rubinius__Arguments_fields, /*isPacked=*/false);
}

PointerType* PointerTy_15 = PointerType::get(StructTy_struct_rubinius__Arguments, 0);

StructType *StructTy_struct_rubinius__jit__RuntimeData = mod->getTypeByName("struct.rubinius::jit::RuntimeData");
if (!StructTy_struct_rubinius__jit__RuntimeData) {
StructTy_struct_rubinius__jit__RuntimeData = StructType::create(mod->getContext(), "struct.rubinius::jit::RuntimeData");
}
std::vector<Type*>StructTy_struct_rubinius__jit__RuntimeData_fields;
StructType *StructTy_struct_rubinius__CompiledMethod = mod->getTypeByName("struct.rubinius::CompiledMethod");
if (!StructTy_struct_rubinius__CompiledMethod) {
StructTy_struct_rubinius__CompiledMethod = StructType::create(mod->getContext(), "struct.rubinius::CompiledMethod");
}
std::vector<Type*>StructTy_struct_rubinius__CompiledMethod_fields;
StructType *StructTy_struct_rubinius__Executable = mod->getTypeByName("struct.rubinius::Executable");
if (!StructTy_struct_rubinius__Executable) {
StructTy_struct_rubinius__Executable = StructType::create(mod->getContext(), "struct.rubinius::Executable");
}
std::vector<Type*>StructTy_struct_rubinius__Executable_fields;
StructTy_struct_rubinius__Executable_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_4);
std::vector<Type*>FuncTy_28_args;
FuncTy_28_args.push_back(PointerTy_1);
StructType *StructTy_struct_rubinius__CallFrame = mod->getTypeByName("struct.rubinius::CallFrame");
if (!StructTy_struct_rubinius__CallFrame) {
StructTy_struct_rubinius__CallFrame = StructType::create(mod->getContext(), "struct.rubinius::CallFrame");
}
std::vector<Type*>StructTy_struct_rubinius__CallFrame_fields;
PointerType* PointerTy_29 = PointerType::get(StructTy_struct_rubinius__CallFrame, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_14);
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_23);
PointerType* PointerTy_26 = PointerType::get(StructTy_struct_rubinius__CompiledMethod, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_26);
StructTy_struct_rubinius__CallFrame_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__CallFrame_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_23);
StructType *StructTy_struct_rubinius__VariableScope = mod->getTypeByName("struct.rubinius::VariableScope");
if (!StructTy_struct_rubinius__VariableScope) {
StructTy_struct_rubinius__VariableScope = StructType::create(mod->getContext(), "struct.rubinius::VariableScope");
}
std::vector<Type*>StructTy_struct_rubinius__VariableScope_fields;
StructTy_struct_rubinius__VariableScope_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_26);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_18);
PointerType* PointerTy_30 = PointerType::get(StructTy_struct_rubinius__VariableScope, 0);

StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_30);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_20);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(mod->getContext(), 8));
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_24);
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__VariableScope->isOpaque()) {
StructTy_struct_rubinius__VariableScope->setBody(StructTy_struct_rubinius__VariableScope_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_30);
StructType *StructTy_struct_rubinius__StackVariables = mod->getTypeByName("struct.rubinius::StackVariables");
if (!StructTy_struct_rubinius__StackVariables) {
StructTy_struct_rubinius__StackVariables = StructType::create(mod->getContext(), "struct.rubinius::StackVariables");
}
std::vector<Type*>StructTy_struct_rubinius__StackVariables_fields;
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_30);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_30);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_18);
StructTy_struct_rubinius__StackVariables_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__StackVariables_fields.push_back(ArrayTy_21);
if (StructTy_struct_rubinius__StackVariables->isOpaque()) {
StructTy_struct_rubinius__StackVariables->setBody(StructTy_struct_rubinius__StackVariables_fields, /*isPacked=*/false);
}

PointerType* PointerTy_31 = PointerType::get(StructTy_struct_rubinius__StackVariables, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_31);
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_15);
StructTy_struct_rubinius__CallFrame_fields.push_back(ArrayTy_21);
if (StructTy_struct_rubinius__CallFrame->isOpaque()) {
StructTy_struct_rubinius__CallFrame->setBody(StructTy_struct_rubinius__CallFrame_fields, /*isPacked=*/false);
}


FuncTy_28_args.push_back(PointerTy_29);
PointerType* PointerTy_32 = PointerType::get(StructTy_struct_rubinius__Executable, 0);

FuncTy_28_args.push_back(PointerTy_32);
FuncTy_28_args.push_back(PointerTy_18);
FuncTy_28_args.push_back(PointerTy_15);
FunctionType* FuncTy_28 = FunctionType::get(
 /*Result=*/PointerTy_16,
 /*Params=*/FuncTy_28_args,
 /*isVarArg=*/false);

PointerType* PointerTy_27 = PointerType::get(FuncTy_28, 0);

StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_27);
StructTy_struct_rubinius__Executable_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_10);
if (StructTy_struct_rubinius__Executable->isOpaque()) {
StructTy_struct_rubinius__Executable->setBody(StructTy_struct_rubinius__Executable_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__CompiledMethod_fields.push_back(StructTy_struct_rubinius__Executable);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_12);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_20);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_20);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_14);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_7);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_3);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_9);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_20);
if (StructTy_struct_rubinius__CompiledMethod->isOpaque()) {
StructTy_struct_rubinius__CompiledMethod->setBody(StructTy_struct_rubinius__CompiledMethod_fields, /*isPacked=*/false);
}


StructTy_struct_rubinius__jit__RuntimeData_fields.push_back(PointerTy_26);
StructTy_struct_rubinius__jit__RuntimeData_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__jit__RuntimeData_fields.push_back(PointerTy_18);
if (StructTy_struct_rubinius__jit__RuntimeData->isOpaque()) {
StructTy_struct_rubinius__jit__RuntimeData->setBody(StructTy_struct_rubinius__jit__RuntimeData_fields, /*isPacked=*/false);
}


StructType *StructTy_struct_rubinius__Dispatch = mod->getTypeByName("struct.rubinius::Dispatch");
if (!StructTy_struct_rubinius__Dispatch) {
StructTy_struct_rubinius__Dispatch = StructType::create(mod->getContext(), "struct.rubinius::Dispatch");
}
std::vector<Type*>StructTy_struct_rubinius__Dispatch_fields;
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_18);
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__Dispatch_fields.push_back(IntegerType::get(mod->getContext(), 8));
if (StructTy_struct_rubinius__Dispatch->isOpaque()) {
StructTy_struct_rubinius__Dispatch->setBody(StructTy_struct_rubinius__Dispatch_fields, /*isPacked=*/false);
}


StructType *StructTy_struct_rubinius__InlineCache = mod->getTypeByName("struct.rubinius::InlineCache");
if (!StructTy_struct_rubinius__InlineCache) {
StructTy_struct_rubinius__InlineCache = StructType::create(mod->getContext(), "struct.rubinius::InlineCache");
}
std::vector<Type*>StructTy_struct_rubinius__InlineCache_fields;
StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_11);
std::vector<Type*>FuncTy_36_args;
FuncTy_36_args.push_back(PointerTy_1);
PointerType* PointerTy_34 = PointerType::get(StructTy_struct_rubinius__InlineCache, 0);

FuncTy_36_args.push_back(PointerTy_34);
FuncTy_36_args.push_back(PointerTy_29);
FuncTy_36_args.push_back(PointerTy_15);
FunctionType* FuncTy_36 = FunctionType::get(
 /*Result=*/PointerTy_16,
 /*Params=*/FuncTy_36_args,
 /*isVarArg=*/false);

PointerType* PointerTy_35 = PointerType::get(FuncTy_36, 0);

StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_35);
StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_35);
PointerType* PointerTy_37 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_37);
StructTy_struct_rubinius__InlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructType *StructTy_struct_rubinius__InlineCacheHit = mod->getTypeByName("struct.rubinius::InlineCacheHit");
if (!StructTy_struct_rubinius__InlineCacheHit) {
StructTy_struct_rubinius__InlineCacheHit = StructType::create(mod->getContext(), "struct.rubinius::InlineCacheHit");
}
std::vector<Type*>StructTy_struct_rubinius__InlineCacheHit_fields;
StructTy_struct_rubinius__InlineCacheHit_fields.push_back(PointerTy_17);
StructTy_struct_rubinius__InlineCacheHit_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__InlineCacheHit->isOpaque()) {
StructTy_struct_rubinius__InlineCacheHit->setBody(StructTy_struct_rubinius__InlineCacheHit_fields, /*isPacked=*/false);
}

ArrayType* ArrayTy_38 = ArrayType::get(StructTy_struct_rubinius__InlineCacheHit, 3);

StructTy_struct_rubinius__InlineCache_fields.push_back(ArrayTy_38);
StructTy_struct_rubinius__InlineCache_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__InlineCache->isOpaque()) {
StructTy_struct_rubinius__InlineCache->setBody(StructTy_struct_rubinius__InlineCache_fields, /*isPacked=*/false);
}



StructType *StructTy_struct_rubinius__UnwindInfo = mod->getTypeByName("struct.rubinius::UnwindInfo");
if (!StructTy_struct_rubinius__UnwindInfo) {
StructTy_struct_rubinius__UnwindInfo = StructType::create(mod->getContext(), "struct.rubinius::UnwindInfo");
}
std::vector<Type*>StructTy_struct_rubinius__UnwindInfo_fields;
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__UnwindInfo->isOpaque()) {
StructTy_struct_rubinius__UnwindInfo->setBody(StructTy_struct_rubinius__UnwindInfo_fields, /*isPacked=*/false);
}



StructType *StructTy_struct_rubinius__ObjectFlags = mod->getTypeByName("struct.rubinius::ObjectFlags");
if (!StructTy_struct_rubinius__ObjectFlags) {
StructTy_struct_rubinius__ObjectFlags = StructType::create(mod->getContext(), "struct.rubinius::ObjectFlags");
}
std::vector<Type*>StructTy_struct_rubinius__ObjectFlags_fields;
StructTy_struct_rubinius__ObjectFlags_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__ObjectFlags_fields.push_back(IntegerType::get(mod->getContext(), 32));
if (StructTy_struct_rubinius__ObjectFlags->isOpaque()) {
StructTy_struct_rubinius__ObjectFlags->setBody(StructTy_struct_rubinius__ObjectFlags_fields, /*isPacked=*/false);
}



StructType *StructTy_struct_rubinius__BlockEnvironment = mod->getTypeByName("struct.rubinius::BlockEnvironment");
if (!StructTy_struct_rubinius__BlockEnvironment) {
StructTy_struct_rubinius__BlockEnvironment = StructType::create(mod->getContext(), "struct.rubinius::BlockEnvironment");
}
std::vector<Type*>StructTy_struct_rubinius__BlockEnvironment_fields;
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_30);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_30);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_26);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_18);
if (StructTy_struct_rubinius__BlockEnvironment->isOpaque()) {
StructTy_struct_rubinius__BlockEnvironment->setBody(StructTy_struct_rubinius__BlockEnvironment_fields, /*isPacked=*/false);
}


StructType *StructTy_struct_rubinius__BlockInvocation = mod->getTypeByName("struct.rubinius::BlockInvocation");
if (!StructTy_struct_rubinius__BlockInvocation) {
StructTy_struct_rubinius__BlockInvocation = StructType::create(mod->getContext(), "struct.rubinius::BlockInvocation");
}
std::vector<Type*>StructTy_struct_rubinius__BlockInvocation_fields;
StructTy_struct_rubinius__BlockInvocation_fields.push_back(IntegerType::get(mod->getContext(), 32));
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_16);
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_14);
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_18);
if (StructTy_struct_rubinius__BlockInvocation->isOpaque()) {
StructTy_struct_rubinius__BlockInvocation->setBody(StructTy_struct_rubinius__BlockInvocation_fields, /*isPacked=*/false);
}


StructType *StructTy_struct_rubinius__Float = mod->getTypeByName("struct.rubinius::Float");
if (!StructTy_struct_rubinius__Float) {
StructTy_struct_rubinius__Float = StructType::create(mod->getContext(), "struct.rubinius::Float");
}
std::vector<Type*>StructTy_struct_rubinius__Float_fields;
StructType *StructTy_struct_rubinius__Numeric = mod->getTypeByName("struct.rubinius::Numeric");
if (!StructTy_struct_rubinius__Numeric) {
StructTy_struct_rubinius__Numeric = StructType::create(mod->getContext(), "struct.rubinius::Numeric");
}
std::vector<Type*>StructTy_struct_rubinius__Numeric_fields;
StructTy_struct_rubinius__Numeric_fields.push_back(StructTy_struct_rubinius__Object);
if (StructTy_struct_rubinius__Numeric->isOpaque()) {
StructTy_struct_rubinius__Numeric->setBody(StructTy_struct_rubinius__Numeric_fields, /*isPacked=*/false);
}

StructTy_struct_rubinius__Float_fields.push_back(StructTy_struct_rubinius__Numeric);
StructTy_struct_rubinius__Float_fields.push_back(Type::getDoubleTy(mod->getContext()));
if (StructTy_struct_rubinius__Float->isOpaque()) {
StructTy_struct_rubinius__Float->setBody(StructTy_struct_rubinius__Float_fields, /*isPacked=*/false);
}



return mod;

}

